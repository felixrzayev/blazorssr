@page "/servers/{id:int}"

@inject NavigationManager NavigationManager

<h3>Edit Server</h3>
<br />
<EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
	<DataAnnotationsValidator></DataAnnotationsValidator>
	@* <ValidationSummary>	</ValidationSummary> *@
	<InputNumber @bind-Value="server.Id" hidden></InputNumber>

	<div class="row mb-3">
		<div class="col-2">
			<label class="col-form-label">Name</label>
		</div>
		<div class="col-6">
			<InputText @bind-Value="server.Name" class="form-control"></InputText>
		</div>
		<div class="col">
			<ValidationMessage For="() => server.Name"></ValidationMessage>
		</div>
	</div>

	<div class="row mb-3">
		<div class="col-2">
			<label class="col-form-label">City</label>
		</div>
		<div class="col-6">
			<InputText @bind-Value="server.City" class="form-control"></InputText>
		</div>
		@* error message *@
		<div class="col">
			<ValidationMessage For="() => server.City"></ValidationMessage>
		</div>
	</div>

	<div class="row mb-3">
		<div class="col-2">
			<label class="col-form-label">Online</label>
		</div>
		<div class="col-6">
			<InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
		</div>
	</div>

	<br />

	<button class="btn btn-primary" type="submit">Update</button>
	&nbsp;
	<a href="/servers" class="btn btn-outline-primary">Close</a>

</EditForm>


@code {

	[Parameter]
	public int Id { get; set; }

	[SupplyParameterFromForm(FormName = "formServer")]
	private Server? server { get; set; }

	// Life cycle events
	// it's triggered when the component receives the paremeter value from URL
	protected override void OnParametersSet()
	{
		// retrive if server is null
		server ??= ServersRepositoryModels.GetServerById(this.Id);
	}

	private void Submit() {
		
		if (server != null) 
		{
			ServersRepositoryModels.UpdateServer(server.Id, server);
		}

		NavigationManager.NavigateTo("/servers");
	}
}
