@page "/servers"
@using ServerManagement.Components.Controls
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Servers</h3>
<div style="display: flex; gap: 15px; flex-wrap: wrap; justify-content: left;">
	@foreach (var city in cities)
	{
		@* <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase) ? "border-primary" : "")"> *@
		<div class=@(this.selectedCity == city ? "card border-primary" : "card")>
			<img src="images/@(city).png" class="card-img-top" alt="@city">
			<div class="card-body">
				<button type="button" class="btn btn-primary" @onclick="@(() => {SelectCity(city);})">@city</button>
			</div>
		</div>
	}
</div>

<br />

<div class="input-group mb-3">
	<input type="text" class="form-control" placeholder="Search Servers" 
	@bind-value="searchFilter" 
	@bind-value:event="oninput"/>
	<button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>

<br />

<ServerListComponent 
	@rendermode="InteractiveServer" 
	CityName="@this.selectedCity"></ServerListComponent>

<p>
	<a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>

@code {
	private List<string> cities = CityRepository.GetCities();

	// this is just initialization. 

	private string selectedCity = "Toronto";

	private string _searchFilter = "";
	private string searchFilter { 
		get => _searchFilter; 
		set
		{
			_searchFilter = value;
			// this.servers = ServersRepositoryModels.SearchServers(_searchFilter);

		}  
	}


	

	private void SelectCity(string cityName) 
	{
		this.selectedCity = cityName;
		// this.servers = ServersRepositoryModels.GetServersByCity(this.selectedCity);
	}

	private void HandleSearch() {
		// this.servers = ServersRepositoryModels.SearchServers(searchFilter);
		this.selectedCity = string.Empty;
	}
}
