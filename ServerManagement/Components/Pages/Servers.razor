@page "/servers"
@using ServerManagement.Components.Controls
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Servers</h3>
<div style="display: flex; gap: 15px; flex-wrap: wrap; justify-content: left;">
	@foreach (var city in cities)
	{
		@* <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase) ? "border-primary" : "")"> *@
		<div class=@(this.selectedCity == city ? "card border-primary" : "card")>
			<img src="images/@(city).png" class="card-img-top" alt="@city">
			<div class="card-body">
				<button type="button" class="btn btn-primary" @onclick="@(() => {SelectCity(city);})">@city</button>
			</div>
		</div>
	}
</div>

<br />

@*Not needed*@
@* <ServerComponent @rendermode="InteractiveServer"></ServerComponent> *@

<div class="input-group mb-3">
	<input type="text" class="form-control" placeholder="Search Servers" @onchange="ServerFilterChange"/>
	<button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>

<br />

<ul>
	@foreach(var server in servers) {
		<li>@server.Name in @server.City is 
			<span style="color:@(server.IsOnline ? "green" : "red")">
				@(server.IsOnline ? "online" : "offline")
			</span>
			&nbsp;
			<a href="/servers/@(server.Id)" class="btn btn-link">Edit</a>
			&nbsp;
			<EditForm 
			Model="server" 
			FormName="@($"form-server-{server.Id}")"
			OnValidSubmit="@(() => {DeleteServer(server.Id);})">
				<button type="submit" class="btn btn-outline-primary">Delete</button>
			</EditForm>
		</li>
	}
</ul>
<p>
	<a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>

@code {
	private List<string> cities = CityRepository.GetCities();

	// this is just initialization. 
	private List<Server> servers = ServersRepositoryModels.GetServersByCity("Montreal");

	private string selectedCity = "Toronto";

	private string searchFilter = "";

	private void DeleteServer(int id) 
	{
		if (id > 0) 
		{
			ServersRepositoryModels.DeleteServer(id);
			NavigationManager.NavigateTo("/servers");

		}
	}

	private void SelectCity(string cityName) 
	{
		this.selectedCity = cityName;
		this.servers = ServersRepositoryModels.GetServersByCity(this.selectedCity);
	}

	private void ServerFilterChange(ChangeEventArgs args) {
		searchFilter = args.Value?.ToString() ?? string.Empty;
	}

	private void HandleSearch() {
		this.servers = ServersRepositoryModels.SearchServers(searchFilter);
		this.selectedCity = string.Empty;
	}
}
